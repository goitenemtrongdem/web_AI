#!/usr/bin/env python3
"""
Script to create the first admin user
"""
import asyncio
import asyncpg
import sys
import os
from getpass import getpass
from pathlib import Path

# Add project root to Python path
project_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(project_root))

from app.utils import hash_password
from app.core.config import DATABASE_URL


async def create_admin_user():
    """Create admin user"""
    print("=== T·∫°o Admin User ===")

    name = input("Nh·∫≠p t√™n admin: ")
    email = input("Nh·∫≠p email admin: ")
    phone = input("Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i admin: ")
    password = getpass("Nh·∫≠p m·∫≠t kh·∫©u admin: ")
    confirm_password = getpass("X√°c nh·∫≠n m·∫≠t kh·∫©u: ")

    if password != confirm_password:
        print("‚ùå M·∫≠t kh·∫©u kh√¥ng kh·ªõp!")
        return

    if len(password) < 6:
        print("‚ùå M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±!")
        return

    # Hash password
    password_hash = hash_password(password)

    # Connect to database
    try:
        conn = await asyncpg.connect(DATABASE_URL)

        # Check if admin already exists
        existing_admin = await conn.fetchval(
            "SELECT id FROM users WHERE role = 'admin' LIMIT 1"
        )

        if existing_admin:
            print("‚ö†Ô∏è  Admin user ƒë√£ t·ªìn t·∫°i!")
            overwrite = input("B·∫°n c√≥ mu·ªën t·∫°o admin kh√°c kh√¥ng? (y/N): ")
            if overwrite.lower() != 'y':
                await conn.close()
                return

        # Check if email or phone exists
        existing_user = await conn.fetchval(
            "SELECT id FROM users WHERE email = $1 OR phone = $2",
            email, phone
        )

        if existing_user:
            print("‚ùå Email ho·∫∑c s·ªë ƒëi·ªán tho·∫°i ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng!")
            await conn.close()
            return

        # Insert admin user
        await conn.execute("""
            INSERT INTO users (name, email, phone, password_hash, role, is_active, is_approved)
            VALUES ($1, $2, $3, $4, 'admin', TRUE, TRUE)
        """, name, email, phone, password_hash)

        print("‚úÖ T·∫°o admin user th√†nh c√¥ng!")
        print(f"üìß Email: {email}")
        print(f"üì± Phone: {phone}")
        print(f"üë§ Role: admin")

        await conn.close()

    except Exception as e:
        print(f"‚ùå L·ªói khi t·∫°o admin user: {e}")


async def list_admins():
    """List all admin users"""
    try:
        conn = await asyncpg.connect(DATABASE_URL)

        admins = await conn.fetch(
            "SELECT id, name, email, phone, created_at FROM users WHERE role = 'admin' ORDER BY created_at"
        )

        if not admins:
            print("Kh√¥ng c√≥ admin user n√†o.")
        else:
            print("\n=== Danh s√°ch Admin Users ===")
            for admin in admins:
                print(f"ID: {admin['id']}")
                print(f"Name: {admin['name']}")
                print(f"Email: {admin['email']}")
                print(f"Phone: {admin['phone']}")
                print(f"Created: {admin['created_at']}")
                print("-" * 30)

        await conn.close()

    except Exception as e:
        print(f"‚ùå L·ªói khi l·∫•y danh s√°ch admin: {e}")


async def main():
    print("üîß Admin User Management")
    print("1. T·∫°o admin user m·ªõi")
    print("2. Xem danh s√°ch admin")

    choice = input("Ch·ªçn (1/2): ").strip()

    if choice == "1":
        await create_admin_user()
    elif choice == "2":
        await list_admins()
    else:
        print("L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!")

if __name__ == "__main__":
    asyncio.run(main())
